# -*-org-*-

erlang-redis is an Erlang binding for Redis.

* Goals

- Bug free

- Complete API implementation

- Easy to maintain

- Performant

- Idiomatic Erlang

* Approach

- redis_client provides an Erlang interface to the Redis protocol spec

- redis provides a complete user facing Redis API

- redis_cmd responsible for sending outbound commands to Redis

- redis_reply responsible for handling replies from Redis

** API

API assumes success where reasonable, so most functions return results directly
rather than tagging them in 'ok' tuples. Errors are communicated as exceptions
rather than return values.

** Variable Length Command Args

Several Redis commands accept variable length arguments (e.g. SADD, DEL,
etc.). This is not idiomatic (or even typical) in Erlang. In these cases, we
use additional "m" (multiple) variants to accomodate (e.g. smadd, mdel, etc).

* Status

Very early stage - bindings are not useful at this time.

However, basic protocol support is in place.



* To Do / Issues

** Queues operations should have a queue API

Rather than return "QUEUED", {ok, "QUEUED"}, etc. we should bake that state
into the API, either by returning the atom 'queued' or by generating an error.

** undefined vs nil

Redis docs use nil for missing values. We use undefined.

I'm not sure undefined is the right thing here -- nil explicitly says "this is
the value that Redis calls nil".

Though arguably it's simpler just to use the Erlang standard undefined.
